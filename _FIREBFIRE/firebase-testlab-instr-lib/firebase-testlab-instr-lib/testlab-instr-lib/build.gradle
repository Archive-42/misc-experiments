apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 2
        versionName '0.2'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'androidx.test:runner:1.3.0'
    implementation 'androidx.test.ext:junit:1.1.2'
}

group = 'com.google.firebase'
version = '0.2'

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.google.firebase'
            artifactId 'testlab-instr-lib'
            version android.defaultConfig.versionName
            afterEvaluate {
                artifact bundleReleaseAar
                artifact androidSourcesJar
            }

            pom {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // List all compile dependencies and write to POM
                    project.configurations.implementation.allDependencies.each { Dependency dep ->
                        if (dep.group == null || dep.version == null || dep.name == null ||
                                dep.name == "unspecified")
                            return // ignore invalid dependencies

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its
                            // dependencies them from the POM
                            def exclusionNode =
                                    dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                }
            }
        }
    }
}

