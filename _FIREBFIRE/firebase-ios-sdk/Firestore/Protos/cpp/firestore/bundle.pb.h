/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/bundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_firestore_2fbundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_firestore_2fbundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/firestore/v1/document.pb.h"
#include "google/firestore/v1/query.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_firestore_2fbundle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_firestore_2fbundle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_firestore_2fbundle_2eproto;
namespace firestore {
class BundleElement;
class BundleElementDefaultTypeInternal;
extern BundleElementDefaultTypeInternal _BundleElement_default_instance_;
class BundleMetadata;
class BundleMetadataDefaultTypeInternal;
extern BundleMetadataDefaultTypeInternal _BundleMetadata_default_instance_;
class BundledDocumentMetadata;
class BundledDocumentMetadataDefaultTypeInternal;
extern BundledDocumentMetadataDefaultTypeInternal _BundledDocumentMetadata_default_instance_;
class BundledQuery;
class BundledQueryDefaultTypeInternal;
extern BundledQueryDefaultTypeInternal _BundledQuery_default_instance_;
class NamedQuery;
class NamedQueryDefaultTypeInternal;
extern NamedQueryDefaultTypeInternal _NamedQuery_default_instance_;
}  // namespace firestore
PROTOBUF_NAMESPACE_OPEN
template<> ::firestore::BundleElement* Arena::CreateMaybeMessage<::firestore::BundleElement>(Arena*);
template<> ::firestore::BundleMetadata* Arena::CreateMaybeMessage<::firestore::BundleMetadata>(Arena*);
template<> ::firestore::BundledDocumentMetadata* Arena::CreateMaybeMessage<::firestore::BundledDocumentMetadata>(Arena*);
template<> ::firestore::BundledQuery* Arena::CreateMaybeMessage<::firestore::BundledQuery>(Arena*);
template<> ::firestore::NamedQuery* Arena::CreateMaybeMessage<::firestore::NamedQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace firestore {

enum BundledQuery_LimitType : int {
  BundledQuery_LimitType_FIRST = 0,
  BundledQuery_LimitType_LAST = 1,
  BundledQuery_LimitType_BundledQuery_LimitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BundledQuery_LimitType_BundledQuery_LimitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BundledQuery_LimitType_IsValid(int value);
constexpr BundledQuery_LimitType BundledQuery_LimitType_LimitType_MIN = BundledQuery_LimitType_FIRST;
constexpr BundledQuery_LimitType BundledQuery_LimitType_LimitType_MAX = BundledQuery_LimitType_LAST;
constexpr int BundledQuery_LimitType_LimitType_ARRAYSIZE = BundledQuery_LimitType_LimitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BundledQuery_LimitType_descriptor();
template<typename T>
inline const std::string& BundledQuery_LimitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BundledQuery_LimitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BundledQuery_LimitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BundledQuery_LimitType_descriptor(), enum_t_value);
}
inline bool BundledQuery_LimitType_Parse(
    const std::string& name, BundledQuery_LimitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BundledQuery_LimitType>(
    BundledQuery_LimitType_descriptor(), name, value);
}
// ===================================================================

class BundledQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.BundledQuery) */ {
 public:
  BundledQuery();
  virtual ~BundledQuery();

  BundledQuery(const BundledQuery& from);
  BundledQuery(BundledQuery&& from) noexcept
    : BundledQuery() {
    *this = ::std::move(from);
  }

  inline BundledQuery& operator=(const BundledQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline BundledQuery& operator=(BundledQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BundledQuery& default_instance();

  enum QueryTypeCase {
    kStructuredQuery = 2,
    QUERY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundledQuery* internal_default_instance() {
    return reinterpret_cast<const BundledQuery*>(
               &_BundledQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BundledQuery& a, BundledQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(BundledQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BundledQuery* New() const final {
    return CreateMaybeMessage<BundledQuery>(nullptr);
  }

  BundledQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BundledQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BundledQuery& from);
  void MergeFrom(const BundledQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundledQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.BundledQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2fbundle_2eproto);
    return ::descriptor_table_firestore_2fbundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BundledQuery_LimitType LimitType;
  static constexpr LimitType FIRST =
    BundledQuery_LimitType_FIRST;
  static constexpr LimitType LAST =
    BundledQuery_LimitType_LAST;
  static inline bool LimitType_IsValid(int value) {
    return BundledQuery_LimitType_IsValid(value);
  }
  static constexpr LimitType LimitType_MIN =
    BundledQuery_LimitType_LimitType_MIN;
  static constexpr LimitType LimitType_MAX =
    BundledQuery_LimitType_LimitType_MAX;
  static constexpr int LimitType_ARRAYSIZE =
    BundledQuery_LimitType_LimitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LimitType_descriptor() {
    return BundledQuery_LimitType_descriptor();
  }
  template<typename T>
  static inline const std::string& LimitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LimitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LimitType_Name.");
    return BundledQuery_LimitType_Name(enum_t_value);
  }
  static inline bool LimitType_Parse(const std::string& name,
      LimitType* value) {
    return BundledQuery_LimitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kLimitTypeFieldNumber = 3,
    kStructuredQueryFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .firestore.BundledQuery.LimitType limit_type = 3;
  void clear_limit_type();
  ::firestore::BundledQuery_LimitType limit_type() const;
  void set_limit_type(::firestore::BundledQuery_LimitType value);
  private:
  ::firestore::BundledQuery_LimitType _internal_limit_type() const;
  void _internal_set_limit_type(::firestore::BundledQuery_LimitType value);
  public:

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  bool has_structured_query() const;
  private:
  bool _internal_has_structured_query() const;
  public:
  void clear_structured_query();
  const ::google::firestore::v1::StructuredQuery& structured_query() const;
  ::google::firestore::v1::StructuredQuery* release_structured_query();
  ::google::firestore::v1::StructuredQuery* mutable_structured_query();
  void set_allocated_structured_query(::google::firestore::v1::StructuredQuery* structured_query);
  private:
  const ::google::firestore::v1::StructuredQuery& _internal_structured_query() const;
  ::google::firestore::v1::StructuredQuery* _internal_mutable_structured_query();
  public:

  void clear_query_type();
  QueryTypeCase query_type_case() const;
  // @@protoc_insertion_point(class_scope:firestore.BundledQuery)
 private:
  class _Internal;
  void set_has_structured_query();

  inline bool has_query_type() const;
  inline void clear_has_query_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  int limit_type_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::google::firestore::v1::StructuredQuery* structured_query_;
  } query_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_firestore_2fbundle_2eproto;
};
// -------------------------------------------------------------------

class NamedQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.NamedQuery) */ {
 public:
  NamedQuery();
  virtual ~NamedQuery();

  NamedQuery(const NamedQuery& from);
  NamedQuery(NamedQuery&& from) noexcept
    : NamedQuery() {
    *this = ::std::move(from);
  }

  inline NamedQuery& operator=(const NamedQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedQuery& operator=(NamedQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedQuery* internal_default_instance() {
    return reinterpret_cast<const NamedQuery*>(
               &_NamedQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NamedQuery& a, NamedQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedQuery* New() const final {
    return CreateMaybeMessage<NamedQuery>(nullptr);
  }

  NamedQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedQuery& from);
  void MergeFrom(const NamedQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.NamedQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2fbundle_2eproto);
    return ::descriptor_table_firestore_2fbundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBundledQueryFieldNumber = 2,
    kReadTimeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .firestore.BundledQuery bundled_query = 2;
  bool has_bundled_query() const;
  private:
  bool _internal_has_bundled_query() const;
  public:
  void clear_bundled_query();
  const ::firestore::BundledQuery& bundled_query() const;
  ::firestore::BundledQuery* release_bundled_query();
  ::firestore::BundledQuery* mutable_bundled_query();
  void set_allocated_bundled_query(::firestore::BundledQuery* bundled_query);
  private:
  const ::firestore::BundledQuery& _internal_bundled_query() const;
  ::firestore::BundledQuery* _internal_mutable_bundled_query();
  public:

  // .google.protobuf.Timestamp read_time = 3;
  bool has_read_time() const;
  private:
  bool _internal_has_read_time() const;
  public:
  void clear_read_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& read_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_read_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_read_time();
  void set_allocated_read_time(PROTOBUF_NAMESPACE_ID::Timestamp* read_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_read_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_read_time();
  public:

  // @@protoc_insertion_point(class_scope:firestore.NamedQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::firestore::BundledQuery* bundled_query_;
  PROTOBUF_NAMESPACE_ID::Timestamp* read_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_firestore_2fbundle_2eproto;
};
// -------------------------------------------------------------------

class BundledDocumentMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.BundledDocumentMetadata) */ {
 public:
  BundledDocumentMetadata();
  virtual ~BundledDocumentMetadata();

  BundledDocumentMetadata(const BundledDocumentMetadata& from);
  BundledDocumentMetadata(BundledDocumentMetadata&& from) noexcept
    : BundledDocumentMetadata() {
    *this = ::std::move(from);
  }

  inline BundledDocumentMetadata& operator=(const BundledDocumentMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BundledDocumentMetadata& operator=(BundledDocumentMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BundledDocumentMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundledDocumentMetadata* internal_default_instance() {
    return reinterpret_cast<const BundledDocumentMetadata*>(
               &_BundledDocumentMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BundledDocumentMetadata& a, BundledDocumentMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BundledDocumentMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BundledDocumentMetadata* New() const final {
    return CreateMaybeMessage<BundledDocumentMetadata>(nullptr);
  }

  BundledDocumentMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BundledDocumentMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BundledDocumentMetadata& from);
  void MergeFrom(const BundledDocumentMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundledDocumentMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.BundledDocumentMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2fbundle_2eproto);
    return ::descriptor_table_firestore_2fbundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 4,
    kNameFieldNumber = 1,
    kReadTimeFieldNumber = 2,
    kExistsFieldNumber = 3,
  };
  // repeated string queries = 4;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  const std::string& queries(int index) const;
  std::string* mutable_queries(int index);
  void set_queries(int index, const std::string& value);
  void set_queries(int index, std::string&& value);
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  std::string* add_queries();
  void add_queries(const std::string& value);
  void add_queries(std::string&& value);
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& queries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_queries();
  private:
  const std::string& _internal_queries(int index) const;
  std::string* _internal_add_queries();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp read_time = 2;
  bool has_read_time() const;
  private:
  bool _internal_has_read_time() const;
  public:
  void clear_read_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& read_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_read_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_read_time();
  void set_allocated_read_time(PROTOBUF_NAMESPACE_ID::Timestamp* read_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_read_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_read_time();
  public:

  // bool exists = 3;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:firestore.BundledDocumentMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> queries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* read_time_;
  bool exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_firestore_2fbundle_2eproto;
};
// -------------------------------------------------------------------

class BundleMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.BundleMetadata) */ {
 public:
  BundleMetadata();
  virtual ~BundleMetadata();

  BundleMetadata(const BundleMetadata& from);
  BundleMetadata(BundleMetadata&& from) noexcept
    : BundleMetadata() {
    *this = ::std::move(from);
  }

  inline BundleMetadata& operator=(const BundleMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BundleMetadata& operator=(BundleMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BundleMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleMetadata* internal_default_instance() {
    return reinterpret_cast<const BundleMetadata*>(
               &_BundleMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BundleMetadata& a, BundleMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BundleMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BundleMetadata* New() const final {
    return CreateMaybeMessage<BundleMetadata>(nullptr);
  }

  BundleMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BundleMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BundleMetadata& from);
  void MergeFrom(const BundleMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.BundleMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2fbundle_2eproto);
    return ::descriptor_table_firestore_2fbundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
    kVersionFieldNumber = 3,
    kTotalDocumentsFieldNumber = 4,
    kTotalBytesFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:

  // uint32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_documents = 4;
  void clear_total_documents();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_documents() const;
  void set_total_documents(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_documents() const;
  void _internal_set_total_documents(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 total_bytes = 5;
  void clear_total_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_bytes() const;
  void set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_bytes() const;
  void _internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:firestore.BundleMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_documents_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_firestore_2fbundle_2eproto;
};
// -------------------------------------------------------------------

class BundleElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.BundleElement) */ {
 public:
  BundleElement();
  virtual ~BundleElement();

  BundleElement(const BundleElement& from);
  BundleElement(BundleElement&& from) noexcept
    : BundleElement() {
    *this = ::std::move(from);
  }

  inline BundleElement& operator=(const BundleElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BundleElement& operator=(BundleElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BundleElement& default_instance();

  enum ElementTypeCase {
    kMetadata = 1,
    kNamedQuery = 2,
    kDocumentMetadata = 3,
    kDocument = 4,
    ELEMENT_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleElement* internal_default_instance() {
    return reinterpret_cast<const BundleElement*>(
               &_BundleElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BundleElement& a, BundleElement& b) {
    a.Swap(&b);
  }
  inline void Swap(BundleElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BundleElement* New() const final {
    return CreateMaybeMessage<BundleElement>(nullptr);
  }

  BundleElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BundleElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BundleElement& from);
  void MergeFrom(const BundleElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.BundleElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2fbundle_2eproto);
    return ::descriptor_table_firestore_2fbundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kNamedQueryFieldNumber = 2,
    kDocumentMetadataFieldNumber = 3,
    kDocumentFieldNumber = 4,
  };
  // .firestore.BundleMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::firestore::BundleMetadata& metadata() const;
  ::firestore::BundleMetadata* release_metadata();
  ::firestore::BundleMetadata* mutable_metadata();
  void set_allocated_metadata(::firestore::BundleMetadata* metadata);
  private:
  const ::firestore::BundleMetadata& _internal_metadata() const;
  ::firestore::BundleMetadata* _internal_mutable_metadata();
  public:

  // .firestore.NamedQuery named_query = 2;
  bool has_named_query() const;
  private:
  bool _internal_has_named_query() const;
  public:
  void clear_named_query();
  const ::firestore::NamedQuery& named_query() const;
  ::firestore::NamedQuery* release_named_query();
  ::firestore::NamedQuery* mutable_named_query();
  void set_allocated_named_query(::firestore::NamedQuery* named_query);
  private:
  const ::firestore::NamedQuery& _internal_named_query() const;
  ::firestore::NamedQuery* _internal_mutable_named_query();
  public:

  // .firestore.BundledDocumentMetadata document_metadata = 3;
  bool has_document_metadata() const;
  private:
  bool _internal_has_document_metadata() const;
  public:
  void clear_document_metadata();
  const ::firestore::BundledDocumentMetadata& document_metadata() const;
  ::firestore::BundledDocumentMetadata* release_document_metadata();
  ::firestore::BundledDocumentMetadata* mutable_document_metadata();
  void set_allocated_document_metadata(::firestore::BundledDocumentMetadata* document_metadata);
  private:
  const ::firestore::BundledDocumentMetadata& _internal_document_metadata() const;
  ::firestore::BundledDocumentMetadata* _internal_mutable_document_metadata();
  public:

  // .google.firestore.v1.Document document = 4;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::google::firestore::v1::Document& document() const;
  ::google::firestore::v1::Document* release_document();
  ::google::firestore::v1::Document* mutable_document();
  void set_allocated_document(::google::firestore::v1::Document* document);
  private:
  const ::google::firestore::v1::Document& _internal_document() const;
  ::google::firestore::v1::Document* _internal_mutable_document();
  public:

  void clear_element_type();
  ElementTypeCase element_type_case() const;
  // @@protoc_insertion_point(class_scope:firestore.BundleElement)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_named_query();
  void set_has_document_metadata();
  void set_has_document();

  inline bool has_element_type() const;
  inline void clear_has_element_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ElementTypeUnion {
    ElementTypeUnion() {}
    ::firestore::BundleMetadata* metadata_;
    ::firestore::NamedQuery* named_query_;
    ::firestore::BundledDocumentMetadata* document_metadata_;
    ::google::firestore::v1::Document* document_;
  } element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_firestore_2fbundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BundledQuery

// string parent = 1;
inline void BundledQuery::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BundledQuery::parent() const {
  // @@protoc_insertion_point(field_get:firestore.BundledQuery.parent)
  return _internal_parent();
}
inline void BundledQuery::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:firestore.BundledQuery.parent)
}
inline std::string* BundledQuery::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:firestore.BundledQuery.parent)
  return _internal_mutable_parent();
}
inline const std::string& BundledQuery::_internal_parent() const {
  return parent_.GetNoArena();
}
inline void BundledQuery::_internal_set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BundledQuery::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firestore.BundledQuery.parent)
}
inline void BundledQuery::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firestore.BundledQuery.parent)
}
inline void BundledQuery::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firestore.BundledQuery.parent)
}
inline std::string* BundledQuery::_internal_mutable_parent() {
  
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BundledQuery::release_parent() {
  // @@protoc_insertion_point(field_release:firestore.BundledQuery.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BundledQuery::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:firestore.BundledQuery.parent)
}

// .google.firestore.v1.StructuredQuery structured_query = 2;
inline bool BundledQuery::_internal_has_structured_query() const {
  return query_type_case() == kStructuredQuery;
}
inline bool BundledQuery::has_structured_query() const {
  return _internal_has_structured_query();
}
inline void BundledQuery::set_has_structured_query() {
  _oneof_case_[0] = kStructuredQuery;
}
inline ::google::firestore::v1::StructuredQuery* BundledQuery::release_structured_query() {
  // @@protoc_insertion_point(field_release:firestore.BundledQuery.structured_query)
  if (_internal_has_structured_query()) {
    clear_has_query_type();
      ::google::firestore::v1::StructuredQuery* temp = query_type_.structured_query_;
    query_type_.structured_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::StructuredQuery& BundledQuery::_internal_structured_query() const {
  return _internal_has_structured_query()
      ? *query_type_.structured_query_
      : *reinterpret_cast< ::google::firestore::v1::StructuredQuery*>(&::google::firestore::v1::_StructuredQuery_default_instance_);
}
inline const ::google::firestore::v1::StructuredQuery& BundledQuery::structured_query() const {
  // @@protoc_insertion_point(field_get:firestore.BundledQuery.structured_query)
  return _internal_structured_query();
}
inline ::google::firestore::v1::StructuredQuery* BundledQuery::_internal_mutable_structured_query() {
  if (!_internal_has_structured_query()) {
    clear_query_type();
    set_has_structured_query();
    query_type_.structured_query_ = CreateMaybeMessage< ::google::firestore::v1::StructuredQuery >(
        GetArenaNoVirtual());
  }
  return query_type_.structured_query_;
}
inline ::google::firestore::v1::StructuredQuery* BundledQuery::mutable_structured_query() {
  // @@protoc_insertion_point(field_mutable:firestore.BundledQuery.structured_query)
  return _internal_mutable_structured_query();
}

// .firestore.BundledQuery.LimitType limit_type = 3;
inline void BundledQuery::clear_limit_type() {
  limit_type_ = 0;
}
inline ::firestore::BundledQuery_LimitType BundledQuery::_internal_limit_type() const {
  return static_cast< ::firestore::BundledQuery_LimitType >(limit_type_);
}
inline ::firestore::BundledQuery_LimitType BundledQuery::limit_type() const {
  // @@protoc_insertion_point(field_get:firestore.BundledQuery.limit_type)
  return _internal_limit_type();
}
inline void BundledQuery::_internal_set_limit_type(::firestore::BundledQuery_LimitType value) {
  
  limit_type_ = value;
}
inline void BundledQuery::set_limit_type(::firestore::BundledQuery_LimitType value) {
  _internal_set_limit_type(value);
  // @@protoc_insertion_point(field_set:firestore.BundledQuery.limit_type)
}

inline bool BundledQuery::has_query_type() const {
  return query_type_case() != QUERY_TYPE_NOT_SET;
}
inline void BundledQuery::clear_has_query_type() {
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}
inline BundledQuery::QueryTypeCase BundledQuery::query_type_case() const {
  return BundledQuery::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamedQuery

// string name = 1;
inline void NamedQuery::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NamedQuery::name() const {
  // @@protoc_insertion_point(field_get:firestore.NamedQuery.name)
  return _internal_name();
}
inline void NamedQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:firestore.NamedQuery.name)
}
inline std::string* NamedQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:firestore.NamedQuery.name)
  return _internal_mutable_name();
}
inline const std::string& NamedQuery::_internal_name() const {
  return name_.GetNoArena();
}
inline void NamedQuery::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NamedQuery::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firestore.NamedQuery.name)
}
inline void NamedQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firestore.NamedQuery.name)
}
inline void NamedQuery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firestore.NamedQuery.name)
}
inline std::string* NamedQuery::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NamedQuery::release_name() {
  // @@protoc_insertion_point(field_release:firestore.NamedQuery.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NamedQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firestore.NamedQuery.name)
}

// .firestore.BundledQuery bundled_query = 2;
inline bool NamedQuery::_internal_has_bundled_query() const {
  return this != internal_default_instance() && bundled_query_ != nullptr;
}
inline bool NamedQuery::has_bundled_query() const {
  return _internal_has_bundled_query();
}
inline void NamedQuery::clear_bundled_query() {
  if (GetArenaNoVirtual() == nullptr && bundled_query_ != nullptr) {
    delete bundled_query_;
  }
  bundled_query_ = nullptr;
}
inline const ::firestore::BundledQuery& NamedQuery::_internal_bundled_query() const {
  const ::firestore::BundledQuery* p = bundled_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firestore::BundledQuery*>(
      &::firestore::_BundledQuery_default_instance_);
}
inline const ::firestore::BundledQuery& NamedQuery::bundled_query() const {
  // @@protoc_insertion_point(field_get:firestore.NamedQuery.bundled_query)
  return _internal_bundled_query();
}
inline ::firestore::BundledQuery* NamedQuery::release_bundled_query() {
  // @@protoc_insertion_point(field_release:firestore.NamedQuery.bundled_query)
  
  ::firestore::BundledQuery* temp = bundled_query_;
  bundled_query_ = nullptr;
  return temp;
}
inline ::firestore::BundledQuery* NamedQuery::_internal_mutable_bundled_query() {
  
  if (bundled_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::firestore::BundledQuery>(GetArenaNoVirtual());
    bundled_query_ = p;
  }
  return bundled_query_;
}
inline ::firestore::BundledQuery* NamedQuery::mutable_bundled_query() {
  // @@protoc_insertion_point(field_mutable:firestore.NamedQuery.bundled_query)
  return _internal_mutable_bundled_query();
}
inline void NamedQuery::set_allocated_bundled_query(::firestore::BundledQuery* bundled_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bundled_query_;
  }
  if (bundled_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bundled_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bundled_query, submessage_arena);
    }
    
  } else {
    
  }
  bundled_query_ = bundled_query;
  // @@protoc_insertion_point(field_set_allocated:firestore.NamedQuery.bundled_query)
}

// .google.protobuf.Timestamp read_time = 3;
inline bool NamedQuery::_internal_has_read_time() const {
  return this != internal_default_instance() && read_time_ != nullptr;
}
inline bool NamedQuery::has_read_time() const {
  return _internal_has_read_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NamedQuery::_internal_read_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = read_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NamedQuery::read_time() const {
  // @@protoc_insertion_point(field_get:firestore.NamedQuery.read_time)
  return _internal_read_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NamedQuery::release_read_time() {
  // @@protoc_insertion_point(field_release:firestore.NamedQuery.read_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = read_time_;
  read_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NamedQuery::_internal_mutable_read_time() {
  
  if (read_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  return read_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NamedQuery::mutable_read_time() {
  // @@protoc_insertion_point(field_mutable:firestore.NamedQuery.read_time)
  return _internal_mutable_read_time();
}
inline void NamedQuery::set_allocated_read_time(PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:firestore.NamedQuery.read_time)
}

// -------------------------------------------------------------------

// BundledDocumentMetadata

// string name = 1;
inline void BundledDocumentMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BundledDocumentMetadata::name() const {
  // @@protoc_insertion_point(field_get:firestore.BundledDocumentMetadata.name)
  return _internal_name();
}
inline void BundledDocumentMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:firestore.BundledDocumentMetadata.name)
}
inline std::string* BundledDocumentMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:firestore.BundledDocumentMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& BundledDocumentMetadata::_internal_name() const {
  return name_.GetNoArena();
}
inline void BundledDocumentMetadata::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BundledDocumentMetadata::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firestore.BundledDocumentMetadata.name)
}
inline void BundledDocumentMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firestore.BundledDocumentMetadata.name)
}
inline void BundledDocumentMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firestore.BundledDocumentMetadata.name)
}
inline std::string* BundledDocumentMetadata::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BundledDocumentMetadata::release_name() {
  // @@protoc_insertion_point(field_release:firestore.BundledDocumentMetadata.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BundledDocumentMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firestore.BundledDocumentMetadata.name)
}

// .google.protobuf.Timestamp read_time = 2;
inline bool BundledDocumentMetadata::_internal_has_read_time() const {
  return this != internal_default_instance() && read_time_ != nullptr;
}
inline bool BundledDocumentMetadata::has_read_time() const {
  return _internal_has_read_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BundledDocumentMetadata::_internal_read_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = read_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BundledDocumentMetadata::read_time() const {
  // @@protoc_insertion_point(field_get:firestore.BundledDocumentMetadata.read_time)
  return _internal_read_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundledDocumentMetadata::release_read_time() {
  // @@protoc_insertion_point(field_release:firestore.BundledDocumentMetadata.read_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = read_time_;
  read_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundledDocumentMetadata::_internal_mutable_read_time() {
  
  if (read_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  return read_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundledDocumentMetadata::mutable_read_time() {
  // @@protoc_insertion_point(field_mutable:firestore.BundledDocumentMetadata.read_time)
  return _internal_mutable_read_time();
}
inline void BundledDocumentMetadata::set_allocated_read_time(PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:firestore.BundledDocumentMetadata.read_time)
}

// bool exists = 3;
inline void BundledDocumentMetadata::clear_exists() {
  exists_ = false;
}
inline bool BundledDocumentMetadata::_internal_exists() const {
  return exists_;
}
inline bool BundledDocumentMetadata::exists() const {
  // @@protoc_insertion_point(field_get:firestore.BundledDocumentMetadata.exists)
  return _internal_exists();
}
inline void BundledDocumentMetadata::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void BundledDocumentMetadata::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:firestore.BundledDocumentMetadata.exists)
}

// repeated string queries = 4;
inline int BundledDocumentMetadata::_internal_queries_size() const {
  return queries_.size();
}
inline int BundledDocumentMetadata::queries_size() const {
  return _internal_queries_size();
}
inline void BundledDocumentMetadata::clear_queries() {
  queries_.Clear();
}
inline std::string* BundledDocumentMetadata::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:firestore.BundledDocumentMetadata.queries)
  return _internal_add_queries();
}
inline const std::string& BundledDocumentMetadata::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const std::string& BundledDocumentMetadata::queries(int index) const {
  // @@protoc_insertion_point(field_get:firestore.BundledDocumentMetadata.queries)
  return _internal_queries(index);
}
inline std::string* BundledDocumentMetadata::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:firestore.BundledDocumentMetadata.queries)
  return queries_.Mutable(index);
}
inline void BundledDocumentMetadata::set_queries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:firestore.BundledDocumentMetadata.queries)
  queries_.Mutable(index)->assign(value);
}
inline void BundledDocumentMetadata::set_queries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:firestore.BundledDocumentMetadata.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
inline void BundledDocumentMetadata::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firestore.BundledDocumentMetadata.queries)
}
inline void BundledDocumentMetadata::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firestore.BundledDocumentMetadata.queries)
}
inline std::string* BundledDocumentMetadata::_internal_add_queries() {
  return queries_.Add();
}
inline void BundledDocumentMetadata::add_queries(const std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firestore.BundledDocumentMetadata.queries)
}
inline void BundledDocumentMetadata::add_queries(std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:firestore.BundledDocumentMetadata.queries)
}
inline void BundledDocumentMetadata::add_queries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firestore.BundledDocumentMetadata.queries)
}
inline void BundledDocumentMetadata::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firestore.BundledDocumentMetadata.queries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BundledDocumentMetadata::queries() const {
  // @@protoc_insertion_point(field_list:firestore.BundledDocumentMetadata.queries)
  return queries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BundledDocumentMetadata::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:firestore.BundledDocumentMetadata.queries)
  return &queries_;
}

// -------------------------------------------------------------------

// BundleMetadata

// string id = 1;
inline void BundleMetadata::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BundleMetadata::id() const {
  // @@protoc_insertion_point(field_get:firestore.BundleMetadata.id)
  return _internal_id();
}
inline void BundleMetadata::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firestore.BundleMetadata.id)
}
inline std::string* BundleMetadata::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleMetadata.id)
  return _internal_mutable_id();
}
inline const std::string& BundleMetadata::_internal_id() const {
  return id_.GetNoArena();
}
inline void BundleMetadata::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BundleMetadata::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firestore.BundleMetadata.id)
}
inline void BundleMetadata::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firestore.BundleMetadata.id)
}
inline void BundleMetadata::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firestore.BundleMetadata.id)
}
inline std::string* BundleMetadata::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BundleMetadata::release_id() {
  // @@protoc_insertion_point(field_release:firestore.BundleMetadata.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BundleMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firestore.BundleMetadata.id)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool BundleMetadata::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool BundleMetadata::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BundleMetadata::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BundleMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:firestore.BundleMetadata.create_time)
  return _internal_create_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundleMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:firestore.BundleMetadata.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundleMetadata::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BundleMetadata::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleMetadata.create_time)
  return _internal_mutable_create_time();
}
inline void BundleMetadata::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:firestore.BundleMetadata.create_time)
}

// uint32 version = 3;
inline void BundleMetadata::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BundleMetadata::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BundleMetadata::version() const {
  // @@protoc_insertion_point(field_get:firestore.BundleMetadata.version)
  return _internal_version();
}
inline void BundleMetadata::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void BundleMetadata::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:firestore.BundleMetadata.version)
}

// uint32 total_documents = 4;
inline void BundleMetadata::clear_total_documents() {
  total_documents_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BundleMetadata::_internal_total_documents() const {
  return total_documents_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BundleMetadata::total_documents() const {
  // @@protoc_insertion_point(field_get:firestore.BundleMetadata.total_documents)
  return _internal_total_documents();
}
inline void BundleMetadata::_internal_set_total_documents(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_documents_ = value;
}
inline void BundleMetadata::set_total_documents(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_documents(value);
  // @@protoc_insertion_point(field_set:firestore.BundleMetadata.total_documents)
}

// uint64 total_bytes = 5;
inline void BundleMetadata::clear_total_bytes() {
  total_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BundleMetadata::_internal_total_bytes() const {
  return total_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BundleMetadata::total_bytes() const {
  // @@protoc_insertion_point(field_get:firestore.BundleMetadata.total_bytes)
  return _internal_total_bytes();
}
inline void BundleMetadata::_internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_bytes_ = value;
}
inline void BundleMetadata::set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:firestore.BundleMetadata.total_bytes)
}

// -------------------------------------------------------------------

// BundleElement

// .firestore.BundleMetadata metadata = 1;
inline bool BundleElement::_internal_has_metadata() const {
  return element_type_case() == kMetadata;
}
inline bool BundleElement::has_metadata() const {
  return _internal_has_metadata();
}
inline void BundleElement::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void BundleElement::clear_metadata() {
  if (_internal_has_metadata()) {
    delete element_type_.metadata_;
    clear_has_element_type();
  }
}
inline ::firestore::BundleMetadata* BundleElement::release_metadata() {
  // @@protoc_insertion_point(field_release:firestore.BundleElement.metadata)
  if (_internal_has_metadata()) {
    clear_has_element_type();
      ::firestore::BundleMetadata* temp = element_type_.metadata_;
    element_type_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firestore::BundleMetadata& BundleElement::_internal_metadata() const {
  return _internal_has_metadata()
      ? *element_type_.metadata_
      : *reinterpret_cast< ::firestore::BundleMetadata*>(&::firestore::_BundleMetadata_default_instance_);
}
inline const ::firestore::BundleMetadata& BundleElement::metadata() const {
  // @@protoc_insertion_point(field_get:firestore.BundleElement.metadata)
  return _internal_metadata();
}
inline ::firestore::BundleMetadata* BundleElement::_internal_mutable_metadata() {
  if (!_internal_has_metadata()) {
    clear_element_type();
    set_has_metadata();
    element_type_.metadata_ = CreateMaybeMessage< ::firestore::BundleMetadata >(
        GetArenaNoVirtual());
  }
  return element_type_.metadata_;
}
inline ::firestore::BundleMetadata* BundleElement::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleElement.metadata)
  return _internal_mutable_metadata();
}

// .firestore.NamedQuery named_query = 2;
inline bool BundleElement::_internal_has_named_query() const {
  return element_type_case() == kNamedQuery;
}
inline bool BundleElement::has_named_query() const {
  return _internal_has_named_query();
}
inline void BundleElement::set_has_named_query() {
  _oneof_case_[0] = kNamedQuery;
}
inline void BundleElement::clear_named_query() {
  if (_internal_has_named_query()) {
    delete element_type_.named_query_;
    clear_has_element_type();
  }
}
inline ::firestore::NamedQuery* BundleElement::release_named_query() {
  // @@protoc_insertion_point(field_release:firestore.BundleElement.named_query)
  if (_internal_has_named_query()) {
    clear_has_element_type();
      ::firestore::NamedQuery* temp = element_type_.named_query_;
    element_type_.named_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firestore::NamedQuery& BundleElement::_internal_named_query() const {
  return _internal_has_named_query()
      ? *element_type_.named_query_
      : *reinterpret_cast< ::firestore::NamedQuery*>(&::firestore::_NamedQuery_default_instance_);
}
inline const ::firestore::NamedQuery& BundleElement::named_query() const {
  // @@protoc_insertion_point(field_get:firestore.BundleElement.named_query)
  return _internal_named_query();
}
inline ::firestore::NamedQuery* BundleElement::_internal_mutable_named_query() {
  if (!_internal_has_named_query()) {
    clear_element_type();
    set_has_named_query();
    element_type_.named_query_ = CreateMaybeMessage< ::firestore::NamedQuery >(
        GetArenaNoVirtual());
  }
  return element_type_.named_query_;
}
inline ::firestore::NamedQuery* BundleElement::mutable_named_query() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleElement.named_query)
  return _internal_mutable_named_query();
}

// .firestore.BundledDocumentMetadata document_metadata = 3;
inline bool BundleElement::_internal_has_document_metadata() const {
  return element_type_case() == kDocumentMetadata;
}
inline bool BundleElement::has_document_metadata() const {
  return _internal_has_document_metadata();
}
inline void BundleElement::set_has_document_metadata() {
  _oneof_case_[0] = kDocumentMetadata;
}
inline void BundleElement::clear_document_metadata() {
  if (_internal_has_document_metadata()) {
    delete element_type_.document_metadata_;
    clear_has_element_type();
  }
}
inline ::firestore::BundledDocumentMetadata* BundleElement::release_document_metadata() {
  // @@protoc_insertion_point(field_release:firestore.BundleElement.document_metadata)
  if (_internal_has_document_metadata()) {
    clear_has_element_type();
      ::firestore::BundledDocumentMetadata* temp = element_type_.document_metadata_;
    element_type_.document_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firestore::BundledDocumentMetadata& BundleElement::_internal_document_metadata() const {
  return _internal_has_document_metadata()
      ? *element_type_.document_metadata_
      : *reinterpret_cast< ::firestore::BundledDocumentMetadata*>(&::firestore::_BundledDocumentMetadata_default_instance_);
}
inline const ::firestore::BundledDocumentMetadata& BundleElement::document_metadata() const {
  // @@protoc_insertion_point(field_get:firestore.BundleElement.document_metadata)
  return _internal_document_metadata();
}
inline ::firestore::BundledDocumentMetadata* BundleElement::_internal_mutable_document_metadata() {
  if (!_internal_has_document_metadata()) {
    clear_element_type();
    set_has_document_metadata();
    element_type_.document_metadata_ = CreateMaybeMessage< ::firestore::BundledDocumentMetadata >(
        GetArenaNoVirtual());
  }
  return element_type_.document_metadata_;
}
inline ::firestore::BundledDocumentMetadata* BundleElement::mutable_document_metadata() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleElement.document_metadata)
  return _internal_mutable_document_metadata();
}

// .google.firestore.v1.Document document = 4;
inline bool BundleElement::_internal_has_document() const {
  return element_type_case() == kDocument;
}
inline bool BundleElement::has_document() const {
  return _internal_has_document();
}
inline void BundleElement::set_has_document() {
  _oneof_case_[0] = kDocument;
}
inline ::google::firestore::v1::Document* BundleElement::release_document() {
  // @@protoc_insertion_point(field_release:firestore.BundleElement.document)
  if (_internal_has_document()) {
    clear_has_element_type();
      ::google::firestore::v1::Document* temp = element_type_.document_;
    element_type_.document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Document& BundleElement::_internal_document() const {
  return _internal_has_document()
      ? *element_type_.document_
      : *reinterpret_cast< ::google::firestore::v1::Document*>(&::google::firestore::v1::_Document_default_instance_);
}
inline const ::google::firestore::v1::Document& BundleElement::document() const {
  // @@protoc_insertion_point(field_get:firestore.BundleElement.document)
  return _internal_document();
}
inline ::google::firestore::v1::Document* BundleElement::_internal_mutable_document() {
  if (!_internal_has_document()) {
    clear_element_type();
    set_has_document();
    element_type_.document_ = CreateMaybeMessage< ::google::firestore::v1::Document >(
        GetArenaNoVirtual());
  }
  return element_type_.document_;
}
inline ::google::firestore::v1::Document* BundleElement::mutable_document() {
  // @@protoc_insertion_point(field_mutable:firestore.BundleElement.document)
  return _internal_mutable_document();
}

inline bool BundleElement::has_element_type() const {
  return element_type_case() != ELEMENT_TYPE_NOT_SET;
}
inline void BundleElement::clear_has_element_type() {
  _oneof_case_[0] = ELEMENT_TYPE_NOT_SET;
}
inline BundleElement::ElementTypeCase BundleElement::element_type_case() const {
  return BundleElement::ElementTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace firestore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::firestore::BundledQuery_LimitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firestore::BundledQuery_LimitType>() {
  return ::firestore::BundledQuery_LimitType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_firestore_2fbundle_2eproto
