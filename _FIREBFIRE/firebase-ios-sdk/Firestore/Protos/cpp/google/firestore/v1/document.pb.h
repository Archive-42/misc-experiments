/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/document.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fdocument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fdocument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fdocument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fdocument_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class ArrayValue;
class ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_FieldsEntry_DoNotUse;
class Document_FieldsEntry_DoNotUseDefaultTypeInternal;
extern Document_FieldsEntry_DoNotUseDefaultTypeInternal _Document_FieldsEntry_DoNotUse_default_instance_;
class MapValue;
class MapValueDefaultTypeInternal;
extern MapValueDefaultTypeInternal _MapValue_default_instance_;
class MapValue_FieldsEntry_DoNotUse;
class MapValue_FieldsEntry_DoNotUseDefaultTypeInternal;
extern MapValue_FieldsEntry_DoNotUseDefaultTypeInternal _MapValue_FieldsEntry_DoNotUse_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::firestore::v1::ArrayValue* Arena::CreateMaybeMessage<::google::firestore::v1::ArrayValue>(Arena*);
template<> ::google::firestore::v1::Document* Arena::CreateMaybeMessage<::google::firestore::v1::Document>(Arena*);
template<> ::google::firestore::v1::Document_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::firestore::v1::Document_FieldsEntry_DoNotUse>(Arena*);
template<> ::google::firestore::v1::MapValue* Arena::CreateMaybeMessage<::google::firestore::v1::MapValue>(Arena*);
template<> ::google::firestore::v1::MapValue_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::firestore::v1::MapValue_FieldsEntry_DoNotUse>(Arena*);
template<> ::google::firestore::v1::Value* Arena::CreateMaybeMessage<::google::firestore::v1::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace firestore {
namespace v1 {

// ===================================================================

class Document_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldsEntry_DoNotUse, 
    std::string, ::google::firestore::v1::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldsEntry_DoNotUse, 
    std::string, ::google::firestore::v1::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Document_FieldsEntry_DoNotUse();
  Document_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_FieldsEntry_DoNotUse& other);
  static const Document_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_FieldsEntry_DoNotUse*>(&_Document_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.firestore.v1.Document.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Document :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(nullptr);
  }

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.Document";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kNameFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
    kUpdateTimeFieldNumber = 4,
  };
  // map<string, .google.firestore.v1.Value> fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
      mutable_fields();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:

  // .google.protobuf.Timestamp update_time = 4;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:

  // @@protoc_insertion_point(class_scope:google.firestore.v1.Document)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_FieldsEntry_DoNotUse,
      std::string, ::google::firestore::v1::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum ValueTypeCase {
    kNullValue = 11,
    kBooleanValue = 1,
    kIntegerValue = 2,
    kDoubleValue = 3,
    kTimestampValue = 10,
    kStringValue = 17,
    kBytesValue = 18,
    kReferenceValue = 5,
    kGeoPointValue = 8,
    kArrayValue = 9,
    kMapValue = 6,
    VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullValueFieldNumber = 11,
    kBooleanValueFieldNumber = 1,
    kIntegerValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kTimestampValueFieldNumber = 10,
    kStringValueFieldNumber = 17,
    kBytesValueFieldNumber = 18,
    kReferenceValueFieldNumber = 5,
    kGeoPointValueFieldNumber = 8,
    kArrayValueFieldNumber = 9,
    kMapValueFieldNumber = 6,
  };
  // .google.protobuf.NullValue null_value = 11;
  private:
  bool _internal_has_null_value() const;
  public:
  void clear_null_value();
  PROTOBUF_NAMESPACE_ID::NullValue null_value() const;
  void set_null_value(PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  PROTOBUF_NAMESPACE_ID::NullValue _internal_null_value() const;
  void _internal_set_null_value(PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // bool boolean_value = 1;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // int64 integer_value = 2;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  ::PROTOBUF_NAMESPACE_ID::int64 integer_value() const;
  void set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_integer_value() const;
  void _internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_value = 3;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // .google.protobuf.Timestamp timestamp_value = 10;
  bool has_timestamp_value() const;
  private:
  bool _internal_has_timestamp_value() const;
  public:
  void clear_timestamp_value();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_value() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_value();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_value() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_value();
  public:

  // string string_value = 17;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 18;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  void set_bytes_value(const std::string& value);
  void set_bytes_value(std::string&& value);
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  std::string* mutable_bytes_value();
  std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // string reference_value = 5;
  private:
  bool _internal_has_reference_value() const;
  public:
  void clear_reference_value();
  const std::string& reference_value() const;
  void set_reference_value(const std::string& value);
  void set_reference_value(std::string&& value);
  void set_reference_value(const char* value);
  void set_reference_value(const char* value, size_t size);
  std::string* mutable_reference_value();
  std::string* release_reference_value();
  void set_allocated_reference_value(std::string* reference_value);
  private:
  const std::string& _internal_reference_value() const;
  void _internal_set_reference_value(const std::string& value);
  std::string* _internal_mutable_reference_value();
  public:

  // .google.type.LatLng geo_point_value = 8;
  bool has_geo_point_value() const;
  private:
  bool _internal_has_geo_point_value() const;
  public:
  void clear_geo_point_value();
  const ::google::type::LatLng& geo_point_value() const;
  ::google::type::LatLng* release_geo_point_value();
  ::google::type::LatLng* mutable_geo_point_value();
  void set_allocated_geo_point_value(::google::type::LatLng* geo_point_value);
  private:
  const ::google::type::LatLng& _internal_geo_point_value() const;
  ::google::type::LatLng* _internal_mutable_geo_point_value();
  public:

  // .google.firestore.v1.ArrayValue array_value = 9;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const ::google::firestore::v1::ArrayValue& array_value() const;
  ::google::firestore::v1::ArrayValue* release_array_value();
  ::google::firestore::v1::ArrayValue* mutable_array_value();
  void set_allocated_array_value(::google::firestore::v1::ArrayValue* array_value);
  private:
  const ::google::firestore::v1::ArrayValue& _internal_array_value() const;
  ::google::firestore::v1::ArrayValue* _internal_mutable_array_value();
  public:

  // .google.firestore.v1.MapValue map_value = 6;
  bool has_map_value() const;
  private:
  bool _internal_has_map_value() const;
  public:
  void clear_map_value();
  const ::google::firestore::v1::MapValue& map_value() const;
  ::google::firestore::v1::MapValue* release_map_value();
  ::google::firestore::v1::MapValue* mutable_map_value();
  void set_allocated_map_value(::google::firestore::v1::MapValue* map_value);
  private:
  const ::google::firestore::v1::MapValue& _internal_map_value() const;
  ::google::firestore::v1::MapValue* _internal_mutable_map_value();
  public:

  void clear_value_type();
  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.Value)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_boolean_value();
  void set_has_integer_value();
  void set_has_double_value();
  void set_has_timestamp_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_reference_value();
  void set_has_geo_point_value();
  void set_has_array_value();
  void set_has_map_value();

  inline bool has_value_type() const;
  inline void clear_has_value_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    int null_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 integer_value_;
    double double_value_;
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_value_;
    ::google::type::LatLng* geo_point_value_;
    ::google::firestore::v1::ArrayValue* array_value_;
    ::google::firestore::v1::MapValue* map_value_;
  } value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2ffirestore_2fv1_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class ArrayValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.ArrayValue) */ {
 public:
  ArrayValue();
  virtual ~ArrayValue();

  ArrayValue(const ArrayValue& from);
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayValue* New() const final {
    return CreateMaybeMessage<ArrayValue>(nullptr);
  }

  ArrayValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayValue& from);
  void MergeFrom(const ArrayValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.ArrayValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .google.firestore.v1.Value values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::google::firestore::v1::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::firestore::v1::Value >*
      mutable_values();
  private:
  const ::google::firestore::v1::Value& _internal_values(int index) const;
  ::google::firestore::v1::Value* _internal_add_values();
  public:
  const ::google::firestore::v1::Value& values(int index) const;
  ::google::firestore::v1::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::firestore::v1::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:google.firestore.v1.ArrayValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::firestore::v1::Value > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class MapValue_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapValue_FieldsEntry_DoNotUse, 
    std::string, ::google::firestore::v1::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapValue_FieldsEntry_DoNotUse, 
    std::string, ::google::firestore::v1::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapValue_FieldsEntry_DoNotUse();
  MapValue_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapValue_FieldsEntry_DoNotUse& other);
  static const MapValue_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapValue_FieldsEntry_DoNotUse*>(&_MapValue_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.firestore.v1.MapValue.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class MapValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.MapValue) */ {
 public:
  MapValue();
  virtual ~MapValue();

  MapValue(const MapValue& from);
  MapValue(MapValue&& from) noexcept
    : MapValue() {
    *this = ::std::move(from);
  }

  inline MapValue& operator=(const MapValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapValue& operator=(MapValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapValue* internal_default_instance() {
    return reinterpret_cast<const MapValue*>(
               &_MapValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapValue& a, MapValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MapValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapValue* New() const final {
    return CreateMaybeMessage<MapValue>(nullptr);
  }

  MapValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapValue& from);
  void MergeFrom(const MapValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.MapValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // map<string, .google.firestore.v1.Value> fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:google.firestore.v1.MapValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapValue_FieldsEntry_DoNotUse,
      std::string, ::google::firestore::v1::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fdocument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Document

// string name = 1;
inline void Document::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Document::name() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Document.name)
  return _internal_name();
}
inline void Document::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Document.name)
}
inline std::string* Document::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Document.name)
  return _internal_mutable_name();
}
inline const std::string& Document::_internal_name() const {
  return name_.GetNoArena();
}
inline void Document::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.Document.name)
}
inline void Document::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.Document.name)
}
inline void Document::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.Document.name)
}
inline std::string* Document::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document::release_name() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Document.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Document.name)
}

// map<string, .google.firestore.v1.Value> fields = 2;
inline int Document::_internal_fields_size() const {
  return fields_.size();
}
inline int Document::fields_size() const {
  return _internal_fields_size();
}
inline void Document::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
Document::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
Document::fields() const {
  // @@protoc_insertion_point(field_map:google.firestore.v1.Document.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
Document::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:google.firestore.v1.Document.fields)
  return _internal_mutable_fields();
}

// .google.protobuf.Timestamp create_time = 3;
inline bool Document::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Document::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Document::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Document::create_time() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Document.create_time)
  return _internal_create_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::release_create_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Document.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Document.create_time)
  return _internal_mutable_create_time();
}
inline void Document::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Document.create_time)
}

// .google.protobuf.Timestamp update_time = 4;
inline bool Document::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool Document::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Document::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Document::update_time() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Document.update_time)
  return _internal_update_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::release_update_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Document.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Document::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Document.update_time)
  return _internal_mutable_update_time();
}
inline void Document::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Document.update_time)
}

// -------------------------------------------------------------------

// Value

// .google.protobuf.NullValue null_value = 11;
inline bool Value::_internal_has_null_value() const {
  return value_type_case() == kNullValue;
}
inline void Value::set_has_null_value() {
  _oneof_case_[0] = kNullValue;
}
inline void Value::clear_null_value() {
  if (_internal_has_null_value()) {
    value_type_.null_value_ = 0;
    clear_has_value_type();
  }
}
inline PROTOBUF_NAMESPACE_ID::NullValue Value::_internal_null_value() const {
  if (_internal_has_null_value()) {
    return static_cast< PROTOBUF_NAMESPACE_ID::NullValue >(value_type_.null_value_);
  }
  return static_cast< PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline PROTOBUF_NAMESPACE_ID::NullValue Value::null_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.null_value)
  return _internal_null_value();
}
inline void Value::_internal_set_null_value(PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null_value()) {
    clear_value_type();
    set_has_null_value();
  }
  value_type_.null_value_ = value;
}
inline void Value::set_null_value(PROTOBUF_NAMESPACE_ID::NullValue value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.null_value)
  _internal_set_null_value(value);
}

// bool boolean_value = 1;
inline bool Value::_internal_has_boolean_value() const {
  return value_type_case() == kBooleanValue;
}
inline void Value::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Value::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_type_.boolean_value_ = false;
    clear_has_value_type();
  }
}
inline bool Value::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_type_.boolean_value_;
  }
  return false;
}
inline void Value::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value_type();
    set_has_boolean_value();
  }
  value_type_.boolean_value_ = value;
}
inline bool Value::boolean_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.boolean_value)
  return _internal_boolean_value();
}
inline void Value::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.boolean_value)
}

// int64 integer_value = 2;
inline bool Value::_internal_has_integer_value() const {
  return value_type_case() == kIntegerValue;
}
inline void Value::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
inline void Value::clear_integer_value() {
  if (_internal_has_integer_value()) {
    value_type_.integer_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::_internal_integer_value() const {
  if (_internal_has_integer_value()) {
    return value_type_.integer_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Value::_internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_integer_value()) {
    clear_value_type();
    set_has_integer_value();
  }
  value_type_.integer_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::integer_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.integer_value)
  return _internal_integer_value();
}
inline void Value::set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.integer_value)
}

// double double_value = 3;
inline bool Value::_internal_has_double_value() const {
  return value_type_case() == kDoubleValue;
}
inline void Value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (_internal_has_double_value()) {
    value_type_.double_value_ = 0;
    clear_has_value_type();
  }
}
inline double Value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_type_.double_value_;
  }
  return 0;
}
inline void Value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value_type();
    set_has_double_value();
  }
  value_type_.double_value_ = value;
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.double_value)
  return _internal_double_value();
}
inline void Value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.double_value)
}

// .google.protobuf.Timestamp timestamp_value = 10;
inline bool Value::_internal_has_timestamp_value() const {
  return value_type_case() == kTimestampValue;
}
inline bool Value::has_timestamp_value() const {
  return _internal_has_timestamp_value();
}
inline void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.timestamp_value)
  if (_internal_has_timestamp_value()) {
    clear_has_value_type();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = value_type_.timestamp_value_;
    value_type_.timestamp_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Value::_internal_timestamp_value() const {
  return _internal_has_timestamp_value()
      ? *value_type_.timestamp_value_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(&PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.timestamp_value)
  return _internal_timestamp_value();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Value::_internal_mutable_timestamp_value() {
  if (!_internal_has_timestamp_value()) {
    clear_value_type();
    set_has_timestamp_value();
    value_type_.timestamp_value_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(
        GetArenaNoVirtual());
  }
  return value_type_.timestamp_value_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Value::mutable_timestamp_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.timestamp_value)
  return _internal_mutable_timestamp_value();
}

// string string_value = 17;
inline bool Value::_internal_has_string_value() const {
  return value_type_case() == kStringValue;
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (_internal_has_string_value()) {
    value_type_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_type();
  }
}
inline const std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.string_value)
  return _internal_string_value();
}
inline void Value::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.string_value)
}
inline std::string* Value::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& Value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_type_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Value::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.string_value)
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.Value.string_value)
}
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.Value.string_value)
}
inline void Value::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.Value.string_value)
}
inline std::string* Value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.string_value)
  if (_internal_has_string_value()) {
    clear_has_value_type();
    return value_type_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_string_value(std::string* string_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Value.string_value)
}

// bytes bytes_value = 18;
inline bool Value::_internal_has_bytes_value() const {
  return value_type_case() == kBytesValue;
}
inline void Value::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Value::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    value_type_.bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_type();
  }
}
inline const std::string& Value::bytes_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.bytes_value)
  return _internal_bytes_value();
}
inline void Value::set_bytes_value(const std::string& value) {
  _internal_set_bytes_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.bytes_value)
}
inline std::string* Value::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.bytes_value)
  return _internal_mutable_bytes_value();
}
inline const std::string& Value::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return value_type_.bytes_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_value_type();
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Value::set_bytes_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.bytes_value)
  if (!_internal_has_bytes_value()) {
    clear_value_type();
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.Value.bytes_value)
}
inline void Value::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes_value()) {
    clear_value_type();
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.Value.bytes_value)
}
inline void Value::set_bytes_value(const void* value, size_t size) {
  if (!_internal_has_bytes_value()) {
    clear_value_type();
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.Value.bytes_value)
}
inline std::string* Value::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_value_type();
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.bytes_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Value::release_bytes_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_value_type();
    return value_type_.bytes_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    value_type_.bytes_value_.UnsafeSetDefault(bytes_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Value.bytes_value)
}

// string reference_value = 5;
inline bool Value::_internal_has_reference_value() const {
  return value_type_case() == kReferenceValue;
}
inline void Value::set_has_reference_value() {
  _oneof_case_[0] = kReferenceValue;
}
inline void Value::clear_reference_value() {
  if (_internal_has_reference_value()) {
    value_type_.reference_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_type();
  }
}
inline const std::string& Value::reference_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.reference_value)
  return _internal_reference_value();
}
inline void Value::set_reference_value(const std::string& value) {
  _internal_set_reference_value(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.reference_value)
}
inline std::string* Value::mutable_reference_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.reference_value)
  return _internal_mutable_reference_value();
}
inline const std::string& Value::_internal_reference_value() const {
  if (_internal_has_reference_value()) {
    return value_type_.reference_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_reference_value(const std::string& value) {
  if (!_internal_has_reference_value()) {
    clear_value_type();
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.reference_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Value::set_reference_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1.Value.reference_value)
  if (!_internal_has_reference_value()) {
    clear_value_type();
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.reference_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.Value.reference_value)
}
inline void Value::set_reference_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_reference_value()) {
    clear_value_type();
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.reference_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.Value.reference_value)
}
inline void Value::set_reference_value(const char* value, size_t size) {
  if (!_internal_has_reference_value()) {
    clear_value_type();
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.reference_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.Value.reference_value)
}
inline std::string* Value::_internal_mutable_reference_value() {
  if (!_internal_has_reference_value()) {
    clear_value_type();
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.reference_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Value::release_reference_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.reference_value)
  if (_internal_has_reference_value()) {
    clear_has_value_type();
    return value_type_.reference_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_reference_value(std::string* reference_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (reference_value != nullptr) {
    set_has_reference_value();
    value_type_.reference_value_.UnsafeSetDefault(reference_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Value.reference_value)
}

// .google.type.LatLng geo_point_value = 8;
inline bool Value::_internal_has_geo_point_value() const {
  return value_type_case() == kGeoPointValue;
}
inline bool Value::has_geo_point_value() const {
  return _internal_has_geo_point_value();
}
inline void Value::set_has_geo_point_value() {
  _oneof_case_[0] = kGeoPointValue;
}
inline ::google::type::LatLng* Value::release_geo_point_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.geo_point_value)
  if (_internal_has_geo_point_value()) {
    clear_has_value_type();
      ::google::type::LatLng* temp = value_type_.geo_point_value_;
    value_type_.geo_point_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::type::LatLng& Value::_internal_geo_point_value() const {
  return _internal_has_geo_point_value()
      ? *value_type_.geo_point_value_
      : *reinterpret_cast< ::google::type::LatLng*>(&::google::type::_LatLng_default_instance_);
}
inline const ::google::type::LatLng& Value::geo_point_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.geo_point_value)
  return _internal_geo_point_value();
}
inline ::google::type::LatLng* Value::_internal_mutable_geo_point_value() {
  if (!_internal_has_geo_point_value()) {
    clear_value_type();
    set_has_geo_point_value();
    value_type_.geo_point_value_ = CreateMaybeMessage< ::google::type::LatLng >(
        GetArenaNoVirtual());
  }
  return value_type_.geo_point_value_;
}
inline ::google::type::LatLng* Value::mutable_geo_point_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.geo_point_value)
  return _internal_mutable_geo_point_value();
}

// .google.firestore.v1.ArrayValue array_value = 9;
inline bool Value::_internal_has_array_value() const {
  return value_type_case() == kArrayValue;
}
inline bool Value::has_array_value() const {
  return _internal_has_array_value();
}
inline void Value::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void Value::clear_array_value() {
  if (_internal_has_array_value()) {
    delete value_type_.array_value_;
    clear_has_value_type();
  }
}
inline ::google::firestore::v1::ArrayValue* Value::release_array_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.array_value)
  if (_internal_has_array_value()) {
    clear_has_value_type();
      ::google::firestore::v1::ArrayValue* temp = value_type_.array_value_;
    value_type_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::ArrayValue& Value::_internal_array_value() const {
  return _internal_has_array_value()
      ? *value_type_.array_value_
      : *reinterpret_cast< ::google::firestore::v1::ArrayValue*>(&::google::firestore::v1::_ArrayValue_default_instance_);
}
inline const ::google::firestore::v1::ArrayValue& Value::array_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.array_value)
  return _internal_array_value();
}
inline ::google::firestore::v1::ArrayValue* Value::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_value_type();
    set_has_array_value();
    value_type_.array_value_ = CreateMaybeMessage< ::google::firestore::v1::ArrayValue >(
        GetArenaNoVirtual());
  }
  return value_type_.array_value_;
}
inline ::google::firestore::v1::ArrayValue* Value::mutable_array_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.array_value)
  return _internal_mutable_array_value();
}

// .google.firestore.v1.MapValue map_value = 6;
inline bool Value::_internal_has_map_value() const {
  return value_type_case() == kMapValue;
}
inline bool Value::has_map_value() const {
  return _internal_has_map_value();
}
inline void Value::set_has_map_value() {
  _oneof_case_[0] = kMapValue;
}
inline void Value::clear_map_value() {
  if (_internal_has_map_value()) {
    delete value_type_.map_value_;
    clear_has_value_type();
  }
}
inline ::google::firestore::v1::MapValue* Value::release_map_value() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Value.map_value)
  if (_internal_has_map_value()) {
    clear_has_value_type();
      ::google::firestore::v1::MapValue* temp = value_type_.map_value_;
    value_type_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::MapValue& Value::_internal_map_value() const {
  return _internal_has_map_value()
      ? *value_type_.map_value_
      : *reinterpret_cast< ::google::firestore::v1::MapValue*>(&::google::firestore::v1::_MapValue_default_instance_);
}
inline const ::google::firestore::v1::MapValue& Value::map_value() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Value.map_value)
  return _internal_map_value();
}
inline ::google::firestore::v1::MapValue* Value::_internal_mutable_map_value() {
  if (!_internal_has_map_value()) {
    clear_value_type();
    set_has_map_value();
    value_type_.map_value_ = CreateMaybeMessage< ::google::firestore::v1::MapValue >(
        GetArenaNoVirtual());
  }
  return value_type_.map_value_;
}
inline ::google::firestore::v1::MapValue* Value::mutable_map_value() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Value.map_value)
  return _internal_mutable_map_value();
}

inline bool Value::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void Value::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline Value::ValueTypeCase Value::value_type_case() const {
  return Value::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayValue

// repeated .google.firestore.v1.Value values = 1;
inline int ArrayValue::_internal_values_size() const {
  return values_.size();
}
inline int ArrayValue::values_size() const {
  return _internal_values_size();
}
inline void ArrayValue::clear_values() {
  values_.Clear();
}
inline ::google::firestore::v1::Value* ArrayValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.ArrayValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::firestore::v1::Value >*
ArrayValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.ArrayValue.values)
  return &values_;
}
inline const ::google::firestore::v1::Value& ArrayValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::google::firestore::v1::Value& ArrayValue::values(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.ArrayValue.values)
  return _internal_values(index);
}
inline ::google::firestore::v1::Value* ArrayValue::_internal_add_values() {
  return values_.Add();
}
inline ::google::firestore::v1::Value* ArrayValue::add_values() {
  // @@protoc_insertion_point(field_add:google.firestore.v1.ArrayValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::firestore::v1::Value >&
ArrayValue::values() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1.ArrayValue.values)
  return values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapValue

// map<string, .google.firestore.v1.Value> fields = 1;
inline int MapValue::_internal_fields_size() const {
  return fields_.size();
}
inline int MapValue::fields_size() const {
  return _internal_fields_size();
}
inline void MapValue::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
MapValue::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >&
MapValue::fields() const {
  // @@protoc_insertion_point(field_map:google.firestore.v1.MapValue.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
MapValue::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::firestore::v1::Value >*
MapValue::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:google.firestore.v1.MapValue.fields)
  return _internal_mutable_fields();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace firestore
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fdocument_2eproto
